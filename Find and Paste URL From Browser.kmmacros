<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>639100811.71494997</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>834010</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>Google Chrome</string>
						<key>Variable</key>
						<string>BrowserName</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>833635</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>function run() {
	let km = Application.currentApplication()
	km.includeStandardAdditions = true
 
	let kmInst = km.systemAttribute("KMINSTANCE");
	let kmeApp = Application("Keyboard Maestro Engine")
 
	let browserName = kmeApp.getvariable("BrowserName",  {instance: kmInst});
    let browser = Application(browserName);
	let currentTab = (browser.name().indexOf("Safari") &gt; -1) ? 
		browser.windows[0].currentTab() :
		browser.windows[0].activeTab;
	return currentTab.name() + " —— " + currentTab.url();
}</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>CurrentTab</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>833259</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>function run() {
	let km = Application.currentApplication()
	km.includeStandardAdditions = true
 
	let kmInst = km.systemAttribute("KMINSTANCE");
	let kmeApp = Application("Keyboard Maestro Engine")
 
	let browserName = kmeApp.getvariable("BrowserName",  {instance: kmInst});
    let browser = Application(browserName);
	let tabs = [];

	for (let windex=0; windex &lt; browser.windows.length; windex++) {
		let win = browser.windows[windex];
		for (let index=0; index &lt; win.tabs.length; index++) {	
			tab = win.tabs[index];
			tabs.push({
				window: windex,
				tab: index,
				name: tab.name(),
				location: tab.url()
			});
		}
	}

	var stringTabs = [];
	for(let i = 0; i &lt; tabs.length; i++) {
		stringTabs.push(tabs[i].name + " —— " + tabs[i].location);
	}
	return stringTabs.join('\n ');
}</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>Result</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>833260</integer>
						<key>InitialSearch</key>
						<string>%Variable%CurrentTab%</string>
						<key>MacroActionType</key>
						<string>PromptWithList</string>
						<key>PromptUID</key>
						<string>A5FF9395-4047-49BB-9F14-C37F8ADC1CFB</string>
						<key>Sort</key>
						<false/>
						<key>Source</key>
						<string>Variable</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>Variable</key>
						<string>Result</string>
						<key>WindowTitle</key>
						<string>Choose Tab</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>IgnoreCaseRegEx</string>
						<key>ActionUID</key>
						<integer>834387</integer>
						<key>Destination</key>
						<string>Variable</string>
						<key>DestinationVariable</key>
						<string>Local__name</string>
						<key>MacroActionType</key>
						<string>SearchReplace</string>
						<key>Replace</key>
						<string>\1</string>
						<key>Search</key>
						<string>(.+) —— (.+)</string>
						<key>Source</key>
						<string>Variable</string>
						<key>Variable</key>
						<string>Result</string>
						<key>Which</key>
						<string>All</string>
					</dict>
					<dict>
						<key>Action</key>
						<string>IgnoreCaseRegEx</string>
						<key>ActionUID</key>
						<integer>832498</integer>
						<key>Destination</key>
						<string>Variable</string>
						<key>DestinationVariable</key>
						<string>Local__url</string>
						<key>MacroActionType</key>
						<string>SearchReplace</string>
						<key>Replace</key>
						<string>\2</string>
						<key>Search</key>
						<string>(.+) —— (.+)</string>
						<key>Source</key>
						<string>Variable</string>
						<key>Variable</key>
						<string>Result</string>
						<key>Which</key>
						<string>All</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>834011</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteJavaScriptForAutomation</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>function run(input) {
	let km = Application.currentApplication()
	km.includeStandardAdditions = true
 
	let kmInst = km.systemAttribute("KMINSTANCE");
	let kmeApp = Application("Keyboard Maestro Engine")
 
	let url = kmeApp.getvariable("Local__url",  {instance: kmInst});
    let pageTitle = kmeApp.getvariable("Local__name",  {instance: kmInst});
    let browserName = kmeApp.getvariable("BrowserName",  {instance: kmInst});
    let browser = Application(browserName);
    let currentTab = (browser.name().indexOf("Safari") &gt; -1) ? 
		browser.windows[0].currentTab() :
		browser.windows[0].activeTab;

	const enableMarkdownFeatures = true;
	const MarkdownLinkLocation = 'END_OF_PARAGRAPH' // Where the link should be located ('END_OF_DOCUMENT', 'END_OF_PARAGRAPH', or 'INLINE').
	
	let system = Application("System Events");
	system.includeStandardAdditions = true;

	//For whatever reason this works wheres currentApplication does not.
	let app = Application(system.processes.where({_and:[{visible:true},{frontmost:true}]})[0].displayedName());
	app.includeStandardAdditions = true;

	function pasteURL(url){
		let savedClipboard = app.theClipboard();
		app.setTheClipboardTo(url);
		system.keystroke('v',{using:["command down"]});
		delay(.5);
		app.setTheClipboardTo(savedClipboard);
	}
	
	function executeJavaScriptInCurrentTab(script) {
		if(browser.name().indexOf("Safari") &gt; -1) {
			return browser.doJavaScript(script, {in:currentTab});
		}
		return browser.execute(currentTab, {javascript:script});
	}
	
	function isGithubComment() {
		let nodeName = executeJavaScriptInCurrentTab("document.activeElement.nodeName.toLocaleLowerCase();");
		let ariaLabel = executeJavaScriptInCurrentTab("document.activeElement.ariaLabel;");
		return (nodeName === 'textarea' &amp;&amp; ariaLabel === 'Comment body');
	}
	
	function getCurrentTextAreaValue() {
		return executeJavaScriptInCurrentTab('document.activeElement.value;');
	}
	
	function insertTextIntoTextAreaAt(text=``, selectionStart, selectionEnd) {
		if (!selectionEnd) {
			selectionEnd = selectionStart;
		}
		let script = `(function() {
			let textArea = document.activeElement;
			textArea.selectionStart = ${selectionStart};
			textArea.selectionEnd = ${selectionEnd};`;
		if(browser.name().indexOf("Safari") &gt; -1) {
			script = script + `let textEvent = document.createEvent('TextEvent');
			textEvent.initTextEvent('textInput', true, true, null, \`${text}\`);
			textArea.dispatchEvent(textEvent);`
		} else {
			// Non Standard, but works in Chrome
			script = script + `document.execCommand( 'insertText', false, \`${text}\`);`;
		}
		script = script + `})();`;
		executeJavaScriptInCurrentTab(script);
	}
	
	const writeUrl = (url) =&gt; {
		if (url) {
			let bbEditMarkdown = (app.name() === "BBEdit" &amp;&amp; app.textWindows.at(0).sourceLanguage() === 'Markdown');
			let githubMarkdown = (app.name() === browser.name() &amp;&amp; /https\:\/\/github.com(.+)\/pull\/[0-9]+/.test(currentTab.url()) &amp;&amp;  isGithubComment());
			let marsEditMarkdown = (app.name() === "MarsEdit");
			if (marsEditMarkdown) {
				delay(.5); //Weird race condition with MarsEdit
			}
					
			if (enableMarkdownFeatures &amp;&amp; (bbEditMarkdown || marsEditMarkdown || githubMarkdown)) { 
				let window = app.windows()[0];

				let selectedText, markdownLinkText, originalOffset = 0, newOffset = 0;
				let selectionStart, selectionEnd; //GitHub only.
				
				if (bbEditMarkdown) {
					selectedText = markdownLinkText = window.selection.contents().toString();
				} else if (githubMarkdown) {					
					selectionStart = executeJavaScriptInCurrentTab('document.activeElement.selectionStart;');
					selectionEnd = executeJavaScriptInCurrentTab('document.activeElement.selectionEnd;');
					selectedText = markdownLinkText = executeJavaScriptInCurrentTab("document.activeElement.value.substring(document.activeElement.selectionStart, document.activeElement.selectionEnd);");
				} else {
					selectedText = markdownLinkText = window.document().selectedText();
				}
				
				if (bbEditMarkdown) { // MarsEdit doesn't provide text offsets
					originalOffset = newOffset = window.selection.characteroffset();
				} else if (githubMarkdown) {
					originalOffset = newOffset = selectionEnd;
				}
				if (MarkdownLinkLocation === 'INLINE' || selectedText.length === 0) {
					markdownLinkText = selectedText.length ? selectedText.replace(/(.+)/g, '[$1](' + url + ')') : '[' + url + '](' + url + ')';
					if (bbEditMarkdown) {
						window.selection.contents = markdownLinkText;
					} else if (githubMarkdown) {
						insertTextIntoTextAreaAt(markdownLinkText, selectionStart, selectionEnd);
					} else {
						window.document().selectedText = markdownLinkText;
					}
					return;
				} else {
					let bodyText, updatedText;
					if (bbEditMarkdown) {
						bodyText = updatedText = window.text();
					} else if (githubMarkdown) {
						bodyText = updatedText = getCurrentTextAreaValue();
					} else {					
						bodyText = updatedText = window.document().body();
					}
					
					let referenceName = selectedText.length ? selectedText : 'ref';
					let referenceNameRegExp = new RegExp('\n\\['+ referenceName +'[0-9\\-]*\\]\\:','g');
							
					let referenceAnchor = '[]';
					let referenceNameCount = 0;
					let referenceNameOccurences = bodyText.match(referenceNameRegExp);
					if (referenceNameOccurences) {
						referenceName = referenceName + '-' + (referenceNameOccurences.length + 1);
					}
					if (referenceNameOccurences || !selectedText.length) {
						let nameDialog = app.displayDialog(`What reference name would you like to use for "${pageTitle}"?`, {
							defaultAnswer: referenceName,
							buttons: ["Cancel", "Use Reference Name"],
							cancelButton: "Cancel",
							defaultButton: "Use Reference Name"
						});
						referenceName = nameDialog.textReturned;
						referenceAnchor = '[' + referenceName + ']';
					}
							
					markdownLinkText = selectedText.length ? selectedText.replace(/(.+)/g, '[$1]'+ referenceAnchor) : '[]' + referenceAnchor;
					if (bbEditMarkdown) {
						newOffset = selectedText.length ? originalOffset + markdownLinkText.length-1 : originalOffset;
						window.selection.contents = markdownLinkText;
						bodyText = updatedText = window.text();
					} else if (githubMarkdown) {
						newOffset = ((selectionEnd - selectionStart) &gt; 0) ? originalOffset + (markdownLinkText.length-selectedText.length) : originalOffset;
						insertTextIntoTextAreaAt(markdownLinkText, selectionStart, selectionEnd);
						bodyText = updatedText = getCurrentTextAreaValue();
					} else {
						window.document().selectedText = markdownLinkText;
						bodyText = updatedText = window.document().body();
					}
					let refenceAnchorText = '[' + referenceName + ']: ' + url;
					referenceAnchorSelectionStart = bodyText.length;
					
					if (MarkdownLinkLocation === 'END_OF_PARAGRAPH') {
						refenceAnchorText = '\n' + refenceAnchorText;
						let paragraphBreakRegexp = /\n\n+/g;
						let paragraphBreakRegexpResult;
						while ((paragraphBreakRegexpResult = paragraphBreakRegexp.exec(bodyText)) !== null) {
							if (paragraphBreakRegexp.lastIndex &gt;= bodyText.indexOf(markdownLinkText)) {
								updatedText = bodyText.slice(0, paragraphBreakRegexpResult.index) + refenceAnchorText + paragraphBreakRegexpResult[0] + bodyText.slice(paragraphBreakRegexp.lastIndex);
								referenceAnchorSelectionStart = paragraphBreakRegexpResult.index;
								break;
							}
						}
						if (updatedText === bodyText) { // We are in the last paragraph
							updatedText = bodyText.replace(/(\n*)$/, refenceAnchorText + "$1");
						}
					} else {
						let prependedExtraLineBreak = '\n\n';
						if (/\[.+\]\:.+\n\s*$/.test(bodyText)) {
							prependedExtraLineBreak = '';
						} else if (/.+\n\s*$/.test(bodyText)) {
							prependedExtraLineBreak = '\n';
						}
						
						refenceAnchorText = prependedExtraLineBreak + refenceAnchorText + '\n';
						updatedText = bodyText + refenceAnchorText;
					}
		
					if (updatedText !== bodyText) {
						if (bbEditMarkdown) {
							window.text = updatedText;
						} else if (githubMarkdown) {
							insertTextIntoTextAreaAt(refenceAnchorText, referenceAnchorSelectionStart)
						} else {
							window.document().body = updatedText;
						}
					}
				}
				if (bbEditMarkdown) {
					app.select(window.characters.at(newOffset).insertionPoints.at(0));
				} else if (githubMarkdown) {
					executeJavaScriptInCurrentTab(`document.activeElement.selectionStart = document.activeElement.selectionEnd = ${newOffset};`);
				}
				
			} else {
				pasteURL(url);
			}
		}
	}

	if (url) {
		writeUrl(url);
	}
}
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>669835197.44253802</real>
				<key>CustomIconData</key>
				<string>KMEP-GenericApplication-/Applications/Safari.app</string>
				<key>ModificationDate</key>
				<real>718296800.35373402</real>
				<key>Name</key>
				<string>Find and Paste URL From Browser</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>FireType</key>
						<string>Pressed</string>
						<key>KeyCode</key>
						<integer>3</integer>
						<key>MacroTriggerType</key>
						<string>HotKey</string>
						<key>Modifiers</key>
						<integer>4096</integer>
					</dict>
				</array>
				<key>UID</key>
				<string>9C94BF45-5009-4016-A757-619E09E52563</string>
			</dict>
		</array>
		<key>Name</key>
		<string>Global Macro Group</string>
		<key>ToggleMacroUID</key>
		<string>FB397B95-F152-429C-B8D9-14DEBA43266B</string>
		<key>UID</key>
		<string>7E9BB46C-1AC3-430F-A6E4-342000E16627</string>
	</dict>
</array>
</plist>
